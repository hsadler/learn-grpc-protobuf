import grpc
from concurrent import futures
import time

# import the generated classes
import autogenerated.hello_pb2 as hello_pb2
import autogenerated.hello_pb2_grpc as hello_pb2_grpc


# create a class to define the server functions
class HelloServicer(hello_pb2_grpc.HelloServicer):

	def SayHello(self, request, context):
		response = hello_pb2.Message()
		response.text = f"Hello, your request message was: {request.text}"
		return response


# create a gRPC server
server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))

# add the defined class to the server
hello_pb2_grpc.add_HelloServicer_to_server(
	HelloServicer(),
	server
)


# listen on port 50051
print('Starting server. Listening on port 50051.')
server.add_insecure_port('[::]:50051')
server.start()


# since server.start() will not block,
# a sleep-loop is added to keep alive
try:
	while True:
		time.sleep(86400)
except KeyboardInterrupt:
	server.stop(0)

